# Example values using existing Kubernetes secret for PAT
# WARNING: PAT authentication is NOT recommended for production
# For production, use OAuth + External Token Provider (see values-oauth-production.yaml)
# This example is for development/testing environments only

# First, create the secret:
# kubectl create secret generic dremio-mcp-secret \
#   --from-literal=pat=your-personal-access-token

# Dremio configuration using existing secret
dremio:
  # Dremio Software instance URI
  uri: "https://dremio.example.com:9047"

  # Reference existing secret instead of providing PAT directly
  existingSecret: "dremio-mcp-secret"

  # Allow DML operations
  allowDml: false

# MCP Server configuration
mcp:
  enableStreamingHttp: true
  port: 8000
  logging:
    enableJson: true
    level: "INFO"
    toFile: false

# Tools configuration
tools:
  serverMode: "FOR_SELF,FOR_DATA_PATTERNS"

# Metrics configuration
metrics:
  enabled: true
  port: 9091

# Image configuration
image:
  repository: myregistry.io/dremio-mcp
  pullPolicy: Always
  tag: "0.1.0"

# Resource configuration
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Service configuration
service:
  type: ClusterIP
  port: 8000
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9091"
    prometheus.io/path: "/metrics"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: dremio-mcp.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: dremio-mcp-tls
      hosts:
        - dremio-mcp.example.com

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

# Security contexts
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

